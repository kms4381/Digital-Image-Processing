
#include <iostream>

#include<opencv\cv.h>
#include<opencv\highgui.h>
#include<opencv\cxcore.h>

#include<stdio.h>
#include<Windows.h>
#include<stdlib.h>
#include<time.h>

#define unsigned char uchar


uchar** uc_alloc(int size_x, int size_y)
{

	uchar** m;
	int i;

	if ((m = (uchar * *)calloc(size_y, sizeof(uchar*))) == NULL)
	{
		printf("uc_alloc error 1\7\n");
		exit(0);
	}

	for (i = 0; i < size_y; i++)
		if ((m[i] = (uchar*)calloc(size_x, sizeof(uchar))) == NULL) {
			printf("uc_alloc error 2\7\n");
			exit(0);

		}
	return m;
}


double** d_alloc(int size_x, int size_y)
{

	double** m;
	int i;

	if ((m = (double**)calloc(size_y, sizeof(double*))) == NULL)
	{
		printf("uc_alloc error 1\7\n");
		exit(0);
	}

	for (i = 0; i < size_y; i++)
		if ((m[i] = (double*)calloc(size_x, sizeof(double))) == NULL) {
			printf("uc_alloc error 2\7\n");
			exit(0);

		}
	return m;
}


void read_ucmatrix(int size_x, int size_y, uchar** ucmatrix, char* filename)
{
	int i;
	FILE* f;
	if ((fopen_s(&f, filename, "rb")) != NULL)
	{
		printf("%s File open Error! \n", filename);
		exit(0);

	}
	for (i = 0; i < size_y; i++)
		if (fread(ucmatrix[i], sizeof(uchar), size_x, f) != size_x)
		{
			printf("Data Read Error! \n");
			exit(0);

		}
	fclose(f);
}
void write_ucmatrix(int size_x, int size_y, uchar** ucmatrix, char* filename)
{
	int i;
	FILE* f;

	if ((fopen_s(&f, filename, "wb")) != NULL)
	{
		printf("%s File open Error! \n", filename);
		exit(0);
	}

	for (i = 0; i < size_y; i++)
		if (fwrite(ucmatrix[i], sizeof(uchar), size_x, f) != size_x)
		{
			printf("Data Write Error! \n");
			exit(0);
		}
	fclose(f);
}


void Bubble_sort(uchar* Sort, uchar* median_value, int Mode, int filterSize) {
	int i, x;
	uchar temp, swap;

	for (x = 0; x < filterSize * filterSize; x++) {
		temp = Sort[x];
		for (i = x; i < filterSize * filterSize - 1; i++) {
			if (temp >= Sort[i + 1]) {
				swap = temp;
				temp = Sort[i + 1];
				Sort[i + 1] = swap;
			}
		}
		Sort[x] = temp;
	}
	if (Mode == -1)         //min
		* median_value = (uchar)Sort[0];
	else if (Mode == 0)      //aver
		* median_value = (uchar)Sort[filterSize * filterSize / 2];
	else if (Mode == 1)      //max
		* median_value = (uchar)Sort[filterSize * filterSize - 1];
}

void median(uchar** inImg, uchar** outImg, int ROW, int COL, int Mode, int filterSize) {
	int i, j, x, y, z, count = 0;
	uchar median_value, Sort[3 * 3];
	for (i = 0; i < ROW; i++)
		for (j = 0; j < COL; j++)
			outImg[i][j] = inImg[i][j];
	for (i = 0; i < ROW - filterSize; i++)
		for (j = 0; j < COL - filterSize; j++) {
			for (x = 0; x < filterSize; x++)
				for (y = 0; y < filterSize; y++)
					Sort[filterSize * x + y] = inImg[i + x][j + y];

			Bubble_sort(Sort, &median_value, Mode, filterSize);
			outImg[i + 1][j + 1] = median_value;


		}
}

int main(int argc, char* argv[])
{

	int i, j,value;
	IplImage* cvImg;
	CvSize imgSize;
	uchar** img,** result_img;

	if (argc != 5)
	{
		printf("Exe imgData x_size y_size \n");
		exit(0);
	}

	imgSize.width = atoi(argv[2]);
	imgSize.height = atoi(argv[3]);
	value = atoi(argv[4]);
	img = uc_alloc(imgSize.width, imgSize.height);
	result_img = uc_alloc(imgSize.width, imgSize.height);
	read_ucmatrix(imgSize.width, imgSize.height, img, argv[1]);

	cvImg = cvCreateImage(imgSize, 8, 1);

	median(img, result_img, imgSize.height, imgSize.width, value, 3);

	for (i = 0; i < imgSize.height; i++)
		for (j = 0; j < imgSize.width; j++)
		{

			((uchar*)(cvImg->imageData + cvImg->widthStep * i))[j] = result_img[i][j];

		}
	cvNamedWindow(argv[1], 1);
	cvShowImage(argv[1], cvImg);

	cvWaitKey(0);

	cvDestroyWindow("image");
	cvReleaseImage(&cvImg);

	getchar();

	return 0;

}